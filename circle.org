# -*- org-src-preserve-indentation: t; -*-
#+PROPERTY: header-args :exports none

bmo-systems repo is responsible for:

1. generating tarballs of the perl dependencies ("vendor bundles")
2. uploading the above to an amazon s3 bucket
3. generating several related docker images

* How-To
** Add perl dependencies to BMO

   Adding dependencies to BMO (or bugzilla in general) involves adding them to Makefile.PL.
   Getting these dependencies deployed to our infrastructure is more complicated.

   You will need (at least) a centos 6 install, and an ubuntu 14.04 install. On
   each, you will want to checkout the BMO code and an unpacked copy of the
   vendor tarball for that platform.

   #+BEGIN_SRC sh :exports code
   perl Makefile.PL
   make cpanfile GEN_CPANFILE_ARGS="-D bmo"
   carton install
   #+END_SRC

After this, file cpanfile and cpanfile.snapshot should be added to bundle/PLATFORM/ and those changes commited.

** Upgrade perl dependencies
   This is the same as adding a dependency, except instead of "carton install" you run "carton upgrade".

* Configuration

#+BEGIN_SRC yaml :tangle ".circleci/config.yml" :noweb yes
# if this file ends in .yml, you should not edit it and edit circle.org instead.
version: 2

<<build_bundles_env>>

jobs:
  <<upload>>
  <<centos6>>
  <<ubuntu14>>
  <<bmo-base>>
  <<bmo-ci>>
  <<bmo-slim>>
  <<bundle-centos6>>
  <<bundle-ubuntu14>>

workflows:
  version: 2
  bundles:
    jobs:
      - centos6:
          <<only master>>
      - ubuntu14:
          <<only master>>
      - bundle-centos6:
          <<only master>>
          requires:
            - upload
      - bundle-ubuntu14:
          <<only master>>
          requires:
            - upload
      - bmo-slim:
          <<only master>>
          requires:
            - centos6
      - bmo-base:
          <<only master>>
          requires:
            - centos6
      - bmo-ci:
          <<only master>>
          requires:
            - bmo-base
      - upload:
          <<only master>>
          requires:
            - centos6
            - ubuntu14
#+END_SRC

#+NAME: only master
#+BEGIN_SRC yaml
filters:
  branches:
    only: master
#+END_SRC

* docker jobs
jobs that build docker containers (bmo-base, bmo-ci, etc)

** bmo-base

#+NAME: bmo-base
#+BEGIN_SRC yaml
bmo-base:
  working_directory: /build
  docker:
    - image: docker:17.06.1-ce
      environment:
        DOCKERHUB_REPO: mozillabteam/bmo-base
  steps:
    - setup_remote_docker
    - checkout
    - attach_workspace:
        at: /build/upload
    - run:
        no_output_timeout: 20m
        working_directory: /build/docker/bmo-base
        command: |
          tar -zxf /build/upload/bmo/vendor.tar.gz bmo/vendor/ bmo/cpanfile bmo/cpanfile.snapshot
          <<docker_build>>
#+END_SRC

** bmo-ci

#+NAME: bmo-ci
#+BEGIN_SRC yaml
bmo-ci:
  working_directory: /build
  docker:
    - image: docker:17.06.1-ce
      environment:
        DOCKERHUB_REPO: mozillabteam/bmo-ci
  steps:
    - setup_remote_docker
    - checkout
    - run:
        working_directory: /build/docker/bmo-ci
        command: |
          <<docker_build>>
    - run:
        command: docker run -ti $DOCKERHUB_REPO env GITHUB_BASE_BRANCH=production TEST_SUITE=sanity runtests.sh
#+END_SRC

** bmo-slim

#+NAME: bmo-slim
#+BEGIN_SRC yaml
bmo-slim:
  working_directory: /build
  docker:
    - image: docker:17.06.1-ce
      environment:
        DOCKERHUB_REPO: mozillabteam/bmo-slim
  steps:
    - setup_remote_docker
    - checkout
    - attach_workspace:
        at: /build/upload
    - run:
        working_directory: /build/docker/bmo-slim
        command: |
          tar -zxf /build/upload/bmo/vendor.tar.gz \
            bmo/vendor/bin \
            bmo/local \
            bmo/cpanfile \
            bmo/cpanfile.snapshot \
            bmo/LIBS.txt \
            bmo/PACKAGES.txt
          <<docker_build>>

#+END_SRC


** bundle-centos6
#+NAME: bundle-centos6
#+BEGIN_SRC yaml
bundle-centos6:
  working_directory: /build
  docker:
    - image: docker:17.06.1-ce
      environment:
        DOCKERHUB_REPO: mozillabteam/bundle-centos6
  steps:
    - setup_remote_docker
    - checkout
    - run: apk --update add perl perl-yaml-xs
    - run: perl bin/job2dockerfile centos6 > Dockerfile
    - run:
        name: build docker container
        command: |
          <<docker_build>>

#+END_SRC

** bundle-ubuntu14
#+NAME: bundle-ubuntu14
#+BEGIN_SRC yaml
bundle-ubuntu14:
  working_directory: /build
  docker:
    - image: docker:17.06.1-ce
      environment:
        DOCKERHUB_REPO: mozillabteam/bundle-ubuntu14
  steps:
    - setup_remote_docker
    - checkout
    - run: apk --update add perl perl-yaml-xs
    - run: perl bin/job2dockerfile ubuntu14 > Dockerfile
    - run:
        name: build docker container
        command: |
          <<docker_build>>

#+END_SRC

* bundle jobs

All the jobs below are used to build collections of the perl dependencies that BMO needs.

** centos 6 job

This job creates the 'bmo' bundle, which is for use on centos 6 or RHEL 6 machines.
This is what production, vagrant, CI, and so on use.

#+NAME: centos6
#+BEGIN_SRC yaml :noweb yes
centos6:
  working_directory: /build
  docker:
    - image: centos:6.9
      environment: 
        <<: *build_bundles_env
        NAME: bmo # named this for historical reasons
  steps:
    - checkout
    - run:
        name: install rpms
        command: /build/bundle/centos6/install-rpms
    <<build_bundles>>
#+END_SRC
** ubuntu 14.04 job

This job creates the 'mozreview' bundle, which is used by the version-control-tools bmoweb container.
It is used for mozreview and probably some other systems and is a huge burden that makes me sad.

#+NAME: ubuntu14
#+BEGIN_SRC yaml :noweb yes
ubuntu14:
  working_directory: /build
  docker:
    - image: ubuntu:14.04
      environment:
        <<: *build_bundles_env
        NAME: mozreview # named this for historical reasons
  steps:
    - checkout
    - run:
        command: cp /build/bundle/ubuntu14/mysql.list /etc/apt/sources.list.d/mysql.list
    - run:
        name: install dependencies
        command: /build/bundle/ubuntu14/install-debs
    <<build_bundles>>
#+END_SRC

** upload job

This job just collects vendor.tar.gzs from other jobs and uploads them to an amazon S3 bucket.

#+NAME: upload
#+BEGIN_SRC yaml
upload:
  working_directory: /build
  docker:
    - image: alpine:latest
      environment:
        S3_BUCKET: moz-devservices-bmocartons
  steps:
    - run:
        command: |
          apk update
          apk add curl # installs ca certs
    - attach_workspace:
        at: /build/upload
    - run:
        name: install awscli
        command: |
          apk update
          apk add py-pip
          pip install awscli
    - run:
        working_directory: /build/upload
        command: |
          for file in */vendor.tar.gz; do
            aws s3 cp $file s3://$S3_BUCKET/$file;
          done
#+END_SRC

* Other pieces of code

Some bits of configuration used in multiple locations

** build_bundles steps

The following list of steps are used on all jobs that build vendor tarballs.

#+NAME: build_bundles
#+BEGIN_SRC yaml
- run:
    name: download some tools
    command: fetch-tools
- run:
    name: copy cpanfile and cpanfile.snapshot
    command: cp bundle/$CIRCLE_JOB/cpanfile* .
- run:
    name: build a vanilla perl
    command: build-vanilla-perl
- run:
    name: install carton
    command: install-carton
- run:
    command: fetch-pari
- run:
    command: $PERL $CARTON install
- run:
    name: patch Crypt::OpenPGP
    command: patch-crypt-openpgp
- run:
      command: $PERL $CARTON bundle
- run:
      command: $PERL $CARTON fatpack
- run:
    name: remove vanilla perl modules
    command: rm -vfr local/lib/perl5
- run:
    command: $SYSTEM_PERL ./vendor/bin/carton install --cached --deployment
- run:
    command: package-bundle
- persist_to_workspace:
    root: /build/upload
    paths:
      - "*/vendor.tar.gz"
- store_artifacts:
    path: '/root/.cpanm/work/*/build.log'
#+END_SRC

** build_bundles environmental variables

the following block are used as default environmental variables for the jobs where bundles are built.

#+NAME: build_bundles_env
#+BEGIN_SRC yaml
build_bundles_env: &build_bundles_env
  PERL_DIR: /opt/vanilla-perl
  PERL: /opt/vanilla-perl/bin/perl
  SYSTEM_PERL: /usr/bin/perl
  CARTON: /opt/vanilla-perl/bin/carton
  PERL5LIB: /build/local/lib/perl5
  PATH: /build/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
#+END_SRC

** docker build / push stanza
#+NAME: docker_build
#+BEGIN_SRC text
docker build -t $DOCKERHUB_REPO:latest .
docker login -u $DOCKER_USER -p $DOCKER_PASS
docker push $DOCKERHUB_REPO:latest
#+END_SRC
